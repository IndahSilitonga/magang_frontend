import React, { useState } from "react";
import { Card, CardHeader, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";

interface SprintTemplate {
  id: string;
  name: string;
  description: string;
  duration: string;
  phases: string[];
  defaultTasks: string[];
}

interface SprintTask {
  task: string;
  assignee: string;
  estimate: string;
  priority: string;
}

interface TeamMember {
  name: string;
  role: string;
  allocation: string;
  status: string;
}

interface SprintCreationProps {
  onBack: () => void;
}

const SprintCreation: React.FC<SprintCreationProps> = ({ onBack }) => {
  const [sprintName, setSprintName] = useState("RFC-123 Authentication Sprint");
  const [startDate, setStartDate] = useState("2024-09-10");
  const [duration, setDuration] = useState("2 weeks");
  const [sprintGoal, setSprintGoal] = useState(
    "Implement secure user authentication system with 2FA support and password policy controls."
  );

  const sprintTemplates: SprintTemplate[] = [
    {
      id: 'template-auth',
      name: 'Authentication Sprint Template',
      description: 'Standard sprint template for authentication features',
      duration: '2 weeks',
      phases: ['Planning', 'Development', 'Testing', 'Review'],
      defaultTasks: [
        'Security requirements analysis',
        'Authentication flow design',
        'Backend API development',
        'Frontend integration',
        'Security testing',
        'Code review and deployment'
      ]
    },
    {
      id: 'template-api',
      name: 'API Development Template',
      description: 'Template for API-focused sprints',
      duration: '2 weeks',
      phases: ['Design', 'Implementation', 'Testing', 'Documentation'],
      defaultTasks: [
        'API specification design',
        'Endpoint implementation',
        'Unit testing',
        'Integration testing',
        'API documentation',
        'Performance testing'
      ]
    }
  ];

  const teamMembers: TeamMember[] = [
    { name: 'Rina', role: 'Frontend', allocation: '60%', status: 'Available' },
    { name: 'Andika', role: 'Backend', allocation: '80%', status: 'Available' },
    { name: 'Jarmika', role: 'Security', allocation: '90%', status: 'Available' },
    { name: 'Danu', role: 'Testing', allocation: '70%', status: 'Available' }
  ];

  const autoGeneratedTasks: SprintTask[] = [
    { task: 'Security requirements analysis', assignee: 'Jarmika', estimate: '1 day', priority: 'High' },
    { task: 'Authentication flow design', assignee: 'Andika', estimate: '2 days', priority: 'High' },
    { task: '2FA integration implementation', assignee: 'Jarmika', estimate: '3 days', priority: 'Medium' },
    { task: 'Frontend login components', assignee: 'Rina', estimate: '3 days', priority: 'Medium' },
    { task: 'JWT token implementation', assignee: 'Andika', estimate: '2 days', priority: 'High' },
    { task: 'Password policy enforcement', assignee: 'Andika', estimate: '2 days', priority: 'Medium' },
    { task: 'Security testing suite', assignee: 'Danu', estimate: '3 days', priority: 'High' },
    { task: 'Integration testing', assignee: 'Danu', estimate: '2 days', priority: 'Medium' }
  ];

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case 'High': return 'bg-red-100 text-red-800';
      case 'Medium': return 'bg-yellow-100 text-yellow-800';
      case 'Low': return 'bg-gray-100 text-gray-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const handleCreateSprint = () => {
    // Handle sprint creation logic
    console.log('Creating sprint with:', {
      sprintName,
      startDate,
      duration,
      sprintGoal,
      teamMembers,
      tasks: autoGeneratedTasks
    });
    // You would typically call an API here or update parent state
  };

  const handleSaveAsDraft = () => {
    // Handle save as draft logic
    console.log('Saving sprint as draft');
  };

  const handlePreviewSprint = () => {
    // Handle preview logic
    console.log('Previewing sprint');
  };

  const handleCheckResourceConflicts = () => {
    // Handle resource conflict checking
    console.log('Checking resource conflicts');
  };

  const handleCustomizeTasks = () => {
    // Handle task customization
    console.log('Customizing tasks');
  };

  const handleApplyTemplate = (templateId: string) => {
    // Handle template application
    console.log('Applying template:', templateId);
  };

  return (
    <main className="p-8 space-y-6">
      {/* Back Button */}
      <button 
        onClick={onBack}
        className="flex items-center text-blue-600 hover:text-blue-800 mb-4"
      >
        ‚Üê Back to Dashboard
      </button>

      {/* Header */}
      <div className="flex justify-between items-center pb-5 border-b border-gray-200">
        <h1 className="text-xl font-bold text-gray-900">
          üöÄ Sprint Creation
        </h1>
        <Button className="bg-gray-600 text-white hover:bg-gray-700">Sprint Templates</Button>
      </div>

      {/* Active Sprint Creation */}
      <Card className="border-l-4 border-l-green-500">
        <CardHeader>
          <div className="bg-green-50 border border-green-200 p-4 rounded-md">
            <h2 className="text-lg font-semibold text-green-800 mb-2">
              Creating Sprint from RFC-123: User Authentication System
            </h2>
            <p className="text-green-700">
              This RFC has been approved and is ready for sprint creation. Review the auto-generated sprint details below.
            </p>
          </div>
        </CardHeader>
        <CardContent className="space-y-6">
          {/* Sprint Configuration */}
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            {/* Sprint Details */}
            <div className="bg-white border border-gray-200 rounded-lg p-6">
              <h3 className="font-semibold text-lg mb-4">üìã Sprint Configuration</h3>
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Sprint Name</label>
                  <input 
                    type="text" 
                    className="w-full border border-gray-300 rounded-md p-2 text-sm"
                    value={sprintName}
                    onChange={(e) => setSprintName(e.target.value)}
                  />
                </div>
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">Start Date</label>
                    <input 
                      type="date" 
                      className="w-full border border-gray-300 rounded-md p-2 text-sm"
                      value={startDate}
                      onChange={(e) => setStartDate(e.target.value)}
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">Duration</label>
                    <select 
                      className="w-full border border-gray-300 rounded-md p-2 text-sm"
                      value={duration}
                      onChange={(e) => setDuration(e.target.value)}
                    >
                      <option>2 weeks</option>
                      <option>3 weeks</option>
                      <option>4 weeks</option>
                    </select>
                  </div>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Sprint Goal</label>
                  <textarea 
                    className="w-full border border-gray-300 rounded-md p-2 text-sm h-20"
                    value={sprintGoal}
                    onChange={(e) => setSprintGoal(e.target.value)}
                  />
                </div>
              </div>
            </div>

            {/* Team Assignment */}
            <div className="bg-white border border-gray-200 rounded-lg p-6">
              <h3 className="font-semibold text-lg mb-4">üë• Team Assignment</h3>
              <div className="space-y-4">
                {teamMembers.map((member, idx) => (
                  <div key={idx} className="flex justify-between items-center p-3 border border-gray-200 rounded-md">
                    <div>
                      <span className="font-medium">{member.name}</span>
                      <span className="text-gray-600 text-sm ml-2">({member.role})</span>
                    </div>
                    <div className="text-right">
                      <div className="text-sm text-gray-600">{member.allocation} allocated</div>
                      <div className="text-xs text-green-600">{member.status}</div>
                    </div>
                  </div>
                ))}
              </div>
              <Button 
                className="w-full mt-4 bg-blue-600 text-white hover:bg-blue-700"
                onClick={handleCheckResourceConflicts}
              >
                Check Resource Conflicts
              </Button>
            </div>
          </div>

          {/* Auto-Generated Tasks */}
          <div className="bg-white border border-gray-200 rounded-lg p-6">
            <div className="flex justify-between items-center mb-4">
              <h3 className="font-semibold text-lg">üìã Auto-Generated Sprint Tasks</h3>
              <Button 
                className="bg-amber-600 text-white hover:bg-amber-700"
                onClick={handleCustomizeTasks}
              >
                Customize Tasks
              </Button>
            </div>
            <div className="space-y-3">
              {autoGeneratedTasks.map((task, idx) => (
                <div key={idx} className="flex justify-between items-center p-3 bg-gray-50 rounded-md">
                  <div className="flex-1">
                    <div className="font-medium text-sm">{task.task}</div>
                    <div className="text-xs text-gray-600 mt-1">
                      Assigned to: {task.assignee} ‚Ä¢ Estimate: {task.estimate}
                    </div>
                  </div>
                  <span className={`px-2 py-1 rounded text-xs font-medium ${getPriorityColor(task.priority)}`}>
                    {task.priority}
                  </span>
                </div>
              ))}
            </div>
          </div>

          {/* Sprint Templates */}
          <div className="bg-white border border-gray-200 rounded-lg p-6">
            <h3 className="font-semibold text-lg mb-4">üìã Available Sprint Templates</h3>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {sprintTemplates.map((template) => (
                <div key={template.id} className="border border-gray-200 rounded-lg p-4">
                  <h4 className="font-medium text-gray-900 mb-2">{template.name}</h4>
                  <p className="text-sm text-gray-600 mb-3">{template.description}</p>
                  <div className="text-xs text-gray-500 mb-3">
                    <div>Duration: {template.duration}</div>
                    <div>Phases: {template.phases.join(' ‚Üí ')}</div>
                  </div>
                  <div className="flex space-x-2">
                    <Button 
                      className="bg-gray-600 text-white hover:bg-gray-700 text-xs px-3 py-1"
                      onClick={() => handleApplyTemplate(template.id)}
                    >
                      Apply Template
                    </Button>
                    <Button className="bg-blue-600 text-white hover:bg-blue-700 text-xs px-3 py-1">
                      Preview
                    </Button>
                  </div>
                </div>
              ))}
            </div>
          </div>

          {/* Action Buttons */}
          <div className="flex space-x-3 pt-4 border-t border-gray-200">
            <Button 
              className="bg-green-600 text-white hover:bg-green-700"
              onClick={handleCreateSprint}
            >
              Create Sprint
            </Button>
            <Button 
              className="bg-amber-600 text-white hover:bg-amber-700"
              onClick={handleSaveAsDraft}
            >
              Save as Draft
            </Button>
            <Button 
              className="bg-gray-600 text-white hover:bg-gray-700"
              onClick={handlePreviewSprint}
            >
              Preview Sprint
            </Button>
            <Button className="border border-gray-300 text-gray-700 hover:bg-blue-50">
              Cancel
            </Button>
          </div>
        </CardContent>
      </Card>
    </main>
  );
};

export default SprintCreation;